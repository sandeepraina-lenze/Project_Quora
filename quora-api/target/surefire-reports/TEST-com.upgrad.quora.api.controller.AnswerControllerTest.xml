<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.upgrad.quora.api.controller.AnswerControllerTest" time="13.081" tests="14" errors="0" skipped="0" failures="14">
  <properties>
    <property name="sun.desktop" value="windows"/>
    <property name="awt.toolkit" value="sun.awt.windows.WToolkit"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api\target\test-classes;C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api\target\classes;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Ratnavli\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Ratnavli\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Ratnavli\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Ratnavli\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Ratnavli\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Ratnavli\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Ratnavli\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Ratnavli\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Ratnavli\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Ratnavli\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Ratnavli\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Ratnavli\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Ratnavli\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Ratnavli\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Ratnavli\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Ratnavli\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Ratnavli\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Ratnavli\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Ratnavli\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Ratnavli\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Ratnavli\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Ratnavli\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Ratnavli\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Ratnavli\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Ratnavli\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Ratnavli\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Ratnavli\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Ratnavli\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Ratnavli\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\postgresql\postgresql\42.2.18\postgresql-42.2.18.jar;C:\Users\Ratnavli\.m2\repository\org\checkerframework\checker-qual\3.5.0\checker-qual-3.5.0.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="user.timezone" value=""/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="os.name" value="Windows 10"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk1.8.0_211\jre\bin"/>
    <property name="sun.java.command" value="C:\Users\Ratnavli\AppData\Local\Temp\surefire4648208004265876813\surefirebooter4321156843774773684.jar C:\Users\Ratnavli\AppData\Local\Temp\surefire4648208004265876813 2021-02-21T23-59-08_135-jvmRun1 surefire6361741606526934833tmp surefire_06417518627689802048tmp"/>
    <property name="surefire.test.class.path" value="C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api\target\test-classes;C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api\target\classes;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.0.1.RELEASE\spring-boot-starter-web-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter\2.0.1.RELEASE\spring-boot-starter-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot\2.0.1.RELEASE\spring-boot-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-logging\2.0.1.RELEASE\spring-boot-starter-logging-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.10.0\log4j-to-slf4j-2.10.0.jar;C:\Users\Ratnavli\.m2\repository\org\apache\logging\log4j\log4j-api\2.10.0\log4j-api-2.10.0.jar;C:\Users\Ratnavli\.m2\repository\org\slf4j\jul-to-slf4j\1.7.25\jul-to-slf4j-1.7.25.jar;C:\Users\Ratnavli\.m2\repository\javax\annotation\javax.annotation-api\1.3.2\javax.annotation-api-1.3.2.jar;C:\Users\Ratnavli\.m2\repository\org\yaml\snakeyaml\1.19\snakeyaml-1.19.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-json\2.0.1.RELEASE\spring-boot-starter-json-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.9.5\jackson-databind-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.9.5\jackson-core-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.9.5\jackson-datatype-jdk8-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.9.5\jackson-datatype-jsr310-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.9.5\jackson-module-parameter-names-2.9.5.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\2.0.1.RELEASE\spring-boot-starter-tomcat-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\8.5.29\tomcat-embed-core-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\8.5.29\tomcat-embed-el-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\8.5.29\tomcat-embed-websocket-8.5.29.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\validator\hibernate-validator\6.0.9.Final\hibernate-validator-6.0.9.Final.jar;C:\Users\Ratnavli\.m2\repository\javax\validation\validation-api\2.0.1.Final\validation-api-2.0.1.Final.jar;C:\Users\Ratnavli\.m2\repository\org\jboss\logging\jboss-logging\3.3.2.Final\jboss-logging-3.3.2.Final.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-webmvc\5.0.5.RELEASE\spring-webmvc-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\io\swagger\swagger-annotations\1.5.18\swagger-annotations-1.5.18.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger2\2.6.1\springfox-swagger2-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\swagger\swagger-models\1.5.10\swagger-models-1.5.10.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-spi\2.6.1\springfox-spi-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-core\2.6.1\springfox-core-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-schema\2.6.1\springfox-schema-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger-common\2.6.1\springfox-swagger-common-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-spring-web\2.6.1\springfox-spring-web-2.6.1.jar;C:\Users\Ratnavli\.m2\repository\com\google\guava\guava\18.0\guava-18.0.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\classmate\1.3.4\classmate-1.3.4.jar;C:\Users\Ratnavli\.m2\repository\org\slf4j\slf4j-api\1.7.25\slf4j-api-1.7.25.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\plugin\spring-plugin-core\1.2.0.RELEASE\spring-plugin-core-1.2.0.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\plugin\spring-plugin-metadata\1.2.0.RELEASE\spring-plugin-metadata-1.2.0.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\mapstruct\mapstruct\1.0.0.Final\mapstruct-1.0.0.Final.jar;C:\Users\Ratnavli\.m2\repository\io\springfox\springfox-swagger-ui\2.6.1\springfox-swagger-ui-2.6.1.jar;C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-service\target\quora-service-1.0-SNAPSHOT.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-validation\2.0.1.RELEASE\spring-boot-starter-validation-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\2.0.1.RELEASE\spring-boot-starter-data-jpa-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-aop\2.0.1.RELEASE\spring-boot-starter-aop-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\aspectj\aspectjweaver\1.8.13\aspectjweaver-1.8.13.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\2.0.1.RELEASE\spring-boot-starter-jdbc-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\zaxxer\HikariCP\2.7.8\HikariCP-2.7.8.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-jdbc\5.0.5.RELEASE\spring-jdbc-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\hibernate-core\5.2.16.Final\hibernate-core-5.2.16.Final.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\Ratnavli\.m2\repository\org\javassist\javassist\3.22.0-GA\javassist-3.22.0-GA.jar;C:\Users\Ratnavli\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Ratnavli\.m2\repository\org\jboss\jandex\2.0.3.Final\jandex-2.0.3.Final.jar;C:\Users\Ratnavli\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Ratnavli\.m2\repository\org\hibernate\common\hibernate-commons-annotations\5.0.1.Final\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\Ratnavli\.m2\repository\javax\transaction\javax.transaction-api\1.2\javax.transaction-api-1.2.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\data\spring-data-jpa\2.0.6.RELEASE\spring-data-jpa-2.0.6.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\data\spring-data-commons\2.0.6.RELEASE\spring-data-commons-2.0.6.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-orm\5.0.5.RELEASE\spring-orm-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-tx\5.0.5.RELEASE\spring-tx-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-aspects\5.0.5.RELEASE\spring-aspects-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\apache\commons\commons-lang3\3.7\commons-lang3-3.7.jar;C:\Users\Ratnavli\.m2\repository\ch\qos\logback\logback-classic\1.2.3\logback-classic-1.2.3.jar;C:\Users\Ratnavli\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar;C:\Users\Ratnavli\.m2\repository\com\auth0\java-jwt\3.4.0\java-jwt-3.4.0.jar;C:\Users\Ratnavli\.m2\repository\commons-codec\commons-codec\1.11\commons-codec-1.11.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-starter-test\2.0.1.RELEASE\spring-boot-starter-test-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-test\2.0.1.RELEASE\spring-boot-test-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\2.0.1.RELEASE\spring-boot-test-autoconfigure-2.0.1.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\jayway\jsonpath\json-path\2.4.0\json-path-2.4.0.jar;C:\Users\Ratnavli\.m2\repository\net\minidev\json-smart\2.3\json-smart-2.3.jar;C:\Users\Ratnavli\.m2\repository\net\minidev\accessors-smart\1.2\accessors-smart-1.2.jar;C:\Users\Ratnavli\.m2\repository\org\ow2\asm\asm\5.0.4\asm-5.0.4.jar;C:\Users\Ratnavli\.m2\repository\junit\junit\4.12\junit-4.12.jar;C:\Users\Ratnavli\.m2\repository\org\assertj\assertj-core\3.9.1\assertj-core-3.9.1.jar;C:\Users\Ratnavli\.m2\repository\org\mockito\mockito-core\2.15.0\mockito-core-2.15.0.jar;C:\Users\Ratnavli\.m2\repository\net\bytebuddy\byte-buddy\1.7.11\byte-buddy-1.7.11.jar;C:\Users\Ratnavli\.m2\repository\net\bytebuddy\byte-buddy-agent\1.7.11\byte-buddy-agent-1.7.11.jar;C:\Users\Ratnavli\.m2\repository\org\objenesis\objenesis\2.6\objenesis-2.6.jar;C:\Users\Ratnavli\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\Ratnavli\.m2\repository\org\hamcrest\hamcrest-library\1.3\hamcrest-library-1.3.jar;C:\Users\Ratnavli\.m2\repository\org\skyscreamer\jsonassert\1.5.0\jsonassert-1.5.0.jar;C:\Users\Ratnavli\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-core\5.0.5.RELEASE\spring-core-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-jcl\5.0.5.RELEASE\spring-jcl-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-test\5.0.5.RELEASE\spring-test-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\xmlunit\xmlunit-core\2.5.1\xmlunit-core-2.5.1.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-web\5.0.8.RELEASE\spring-web-5.0.8.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-beans\5.0.5.RELEASE\spring-beans-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.9.6\jackson-annotations-2.9.6.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-context\5.0.8.RELEASE\spring-context-5.0.8.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-aop\5.0.5.RELEASE\spring-aop-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\springframework\spring-expression\5.0.5.RELEASE\spring-expression-5.0.5.RELEASE.jar;C:\Users\Ratnavli\.m2\repository\org\postgresql\postgresql\42.2.18\postgresql-42.2.18.jar;C:\Users\Ratnavli\.m2\repository\org\checkerframework\checker-qual\3.5.0\checker-qual-3.5.0.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Ratnavli"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.home" value="C:\Program Files\Java\jdk1.8.0_211\jre"/>
    <property name="basedir" value="C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api"/>
    <property name="file.separator" value="\"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/>
    <property name="surefire.real.class.path" value="C:\Users\Ratnavli\AppData\Local\Temp\surefire4648208004265876813\surefirebooter4321156843774773684.jar"/>
    <property name="sun.boot.class.path" value="C:\Program Files\Java\jdk1.8.0_211\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_211\jre\classes"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="1.8.0_211-b12"/>
    <property name="user.name" value="Ratnavli"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.endorsed.dirs" value="C:\Program Files\Java\jdk1.8.0_211\jre\lib\endorsed"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Ratnavli\.m2\repository"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\Ratnavli\AppData\Local\Temp\"/>
    <property name="java.version" value="1.8.0_211"/>
    <property name="user.dir" value="C:\Users\Ratnavli\IdeaProjects\Project_Quora\quora-api"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk1.8.0_211\jre\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Program Files\Amazon\AWSCLIV2\;C:\Program Files\Java\jdk1.8.0_211\bin;C:\ProgramData\chocolatey\lib\maven\apache-maven-3.6.3\bin;C:\Program Files\PostgreSQL\10\bin;C:\Users\Ratnavli\Downloads\plugablesofts;C:\Program Files\PostgreSQL\13\bin;C:\Program Files\PostgreSQL\13\lib;C:\Program Files\Docker\Docker\resources\bin;C:\ProgramData\DockerDesktop\version-bin;C:\src;C:\src\flutter\bin;C:\Python39\Scripts\;C:\Python39\;C:\Users\Ratnavli\AppData\Local\Programs\Python\Python39\Scripts\;C:\Users\Ratnavli\AppData\Local\Programs\Python\Python39\;C:\Users\Ratnavli\AppData\Local\Microsoft\WindowsApps;C:\Program Files\JetBrains\IntelliJ IDEA 2020.2.3\bin;C:\Users\Ratnavli\AppData\Roaming\npm;C:\Users\Ratnavli\AppData\Local\GitHubDesktop\bin;C:\ProgramData\Ratnavli\atom\bin;C:\Program Files\IBM\Cloud\bin;."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="25.211-b12"/>
    <property name="java.ext.dirs" value="C:\Program Files\Java\jdk1.8.0_211\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="52.0"/>
  </properties>
  <testcase name="deleteAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.335">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithNonExistingAccessToken(AnswerControllerTest.java:87)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.269  INFO 10080 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.upgrad.quora.api.controller.AnswerControllerTest], using SpringBootContextLoader
2021-02-21 23:59:43.271  INFO 10080 --- [           main] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2021-02-21 23:59:43.271  INFO 10080 --- [           main] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.upgrad.quora.api.controller.AnswerControllerTest]: AnswerControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2021-02-21 23:59:43.279  INFO 10080 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.upgrad.quora.api.QuoraApiApplication for test class com.upgrad.quora.api.controller.AnswerControllerTest
2021-02-21 23:59:43.283  INFO 10080 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2021-02-21 23:59:43.284  INFO 10080 --- [           main] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@2a2798a2, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2b9ecd05, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@31f1b268, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3ec7ad61, org.springframework.test.context.support.DirtiesContextTestExecutionListener@2833c093, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7598d675, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@4946485c, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@4ae958b0, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@7c682e26, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@4ff074a0, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@340fc1aa, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@34a33343]

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToNonExistingQuestion" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.477">
    <failure message="Status expected:&lt;404&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<404> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToNonExistingQuestion(AnswerControllerTest.java:135)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.378  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "non_existing_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToQuestionWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.583">
    <failure message="Status expected:&lt;403&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToQuestionWithSignedOutUser(AnswerControllerTest.java:127)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.397  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "database_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.645">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithNonExistingAccessToken(AnswerControllerTest.java:55)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.695">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithSignedOutUser(AnswerControllerTest.java:95)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerForNonExistingQuestion" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="0.76">
    <failure message="Status expected:&lt;404&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<404> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerForNonExistingQuestion(AnswerControllerTest.java:47)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.537  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "non_existing_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteAnswerWithoutOwnership" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.075">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteAnswerWithoutOwnership(AnswerControllerTest.java:111)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="deleteNonExistingAnswer" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.077">
    <failure message="No value at JSON path &quot;code&quot;" type="java.lang.AssertionError">java.lang.AssertionError: No value at JSON path "code"
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteNonExistingAnswer(AnswerControllerTest.java:104)
Caused by: java.lang.IllegalArgumentException: json can not be null or empty
	at com.upgrad.quora.api.controller.AnswerControllerTest.deleteNonExistingAnswer(AnswerControllerTest.java:104)
</failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="getAllAnswersToQuestionWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.048">
    <failure message="Status expected:&lt;403&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.getAllAnswersToQuestionWithNonExistingAccessToken(AnswerControllerTest.java:119)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.607  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "database_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithoutOwnership" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.047">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithoutOwnership(AnswerControllerTest.java:79)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.055">
    <failure message="Status expected:&lt;403&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<404>
	at com.upgrad.quora.api.controller.AnswerControllerTest.editAnswerWithSignedOutUser(AnswerControllerTest.java:63)
]]></failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerWithNonExistingAccessToken" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.224">
    <failure message="Status expected:&lt;403&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerWithNonExistingAccessToken(AnswerControllerTest.java:31)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.683  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "database_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="createAnswerWithSignedOutUser" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.344">
    <failure message="Status expected:&lt;403&gt; but was:&lt;400&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<403> but was:<400>
	at com.upgrad.quora.api.controller.AnswerControllerTest.createAnswerWithSignedOutUser(AnswerControllerTest.java:39)
]]></failure>
    <system-out><![CDATA[2021-02-21 23:59:43.701  WARN 10080 --- [           main] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to bind request element: org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'long'; nested exception is java.lang.NumberFormatException: For input string: "database_question_uuid"

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="editNonExistingAnswer" classname="com.upgrad.quora.api.controller.AnswerControllerTest" time="1.433">
    <failure message="No value at JSON path &quot;code&quot;" type="java.lang.AssertionError">java.lang.AssertionError: No value at JSON path "code"
	at com.upgrad.quora.api.controller.AnswerControllerTest.editNonExistingAnswer(AnswerControllerTest.java:72)
Caused by: java.lang.IllegalArgumentException: json can not be null or empty
	at com.upgrad.quora.api.controller.AnswerControllerTest.editNonExistingAnswer(AnswerControllerTest.java:72)
</failure>
    <system-out><![CDATA[
MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/database_uuid4
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /admin/user/non_existing_user_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/non_existing_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/non_existing_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/database_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken2]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /answer/delete/non_existing_answer_uuid
       Parameters = {}
          Headers = {authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /answer/all/database_question_uuid
       Parameters = {}
          Headers = {authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<java.util.List<com.upgrad.quora.api.model.AnswerDetailsResponse>> com.upgrad.quora.api.controller.AnswerController.getAllAnswersToQuestion(long,java.lang.String) throws com.upgrad.quora.service.exception.AuthorizationFailedException,com.upgrad.quora.service.exception.InvalidQuestionException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/database_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[non_existing_access_token]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /question/database_question_uuid/answer/create
       Parameters = {answer=[my_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken3]}
             Body = null
    Session Attrs = {}

Handler:
             Type = com.upgrad.quora.api.controller.AnswerController
           Method = public org.springframework.http.ResponseEntity<com.upgrad.quora.api.model.AnswerResponse> com.upgrad.quora.api.controller.AnswerController.createAnswer(com.upgrad.quora.api.model.AnswerRequest,java.lang.String,long) throws com.upgrad.quora.service.exception.InvalidQuestionException,com.upgrad.quora.service.exception.AuthorizationFailedException

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /answer/edit/non_existing_answer_uuid
       Parameters = {content=[edited_answer]}
          Headers = {Content-Type=[application/json;charset=UTF-8], authorization=[database_accesstoken1]}
             Body = null
    Session Attrs = {}

Handler:
             Type = org.springframework.web.servlet.resource.ResourceHttpRequestHandler

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = {}
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
</testsuite>